//  This file was generated by LevelHelper
//  http://levelhelper.wordpress.com
//
//  LevelHelperLoader.h - online version
//  Created by Bogdan Vladu
//  Copyright 2011 Bogdan Vladu. All rights reserved.
//
////////////////////////////////////////////////////////////////////////////////
//
//  This software is provided 'as-is', without any express or implied
//  warranty.  In no event will the authors be held liable for any damages
//  arising from the use of this software.
//  Permission is granted to anyone to use this software for any purpose,
//  including commercial applications, and to alter it and redistribute it
//  freely, subject to the following restrictions:
//  The origin of this software must not be misrepresented; you must not
//  claim that you wrote the original software. If you use this software
//  in a product, an acknowledgment in the product documentation would be
//  appreciated but is not required.
//  Altered source versions must be plainly marked as such, and must not be
//  misrepresented as being the original software.
//  This notice may not be removed or altered from any source distribution.
//  By "software" the author refers to this code file and not the application 
//  that was used to generate this file.
//
////////////////////////////////////////////////////////////////////////////////
//
//  Version history
//  ...............
//  v2.9 Added support for LevelHelper 1.3 - please contact me if you find something not working
//  v3.0 Fixed conversion on bezier, parallax, wb
//  v3.1 Fixed a release issue
//  v3.2 Fixed a crash on animations without loop
//  v3.3 Fixed revolute joint issue
//  v3.4 Fixed a release issue
//  v3.5 Added support for Retina in ipad, fixed a box2d issue
//  v3.5.1 Changer removeBody method to let you remove a body created by you
//  v3.5.2 Fixed a little retina bug
////////////////////////////////////////////////////////////////////////////////

#import <Foundation/Foundation.h>
#import "cocos2d.h"
#import "Box2D.h"

enum LevelHelper_TAG 
{ 
	DEFAULT_TAG 	= 0,
	PLAYER 			= 1,
	GROUND 			= 2,
	ENEMY 			= 3,
	BULLET 			= 4,
	WOODEN_BOX 			= 5,
	CHECKPOINT 			= 6,
	NUMBER_OF_TAGS 	= 7
};

@interface CCParallaxNode (Extras) 

-(void) incrementOffset:(CGPoint)offset forChild:(CCNode*)node;

@end

struct LHJoint {
    int tag;
    void* userData; //put your custom data here
};
typedef struct LHJoint LHJoint;

#define BATCH_NODE_CAPACITY 100 //you should change this value if you have more then 100 sprites in a texture image

//Pixel to metres ratio. Box2D uses metres as the unit for measurement.
//This ratio defines how many pixels correspond to 1 Box2D "metre"
//Box2D is optimized for objects of 1x1 metre therefore it makes sense
//to define the ratio so that your most common object type is 1x1 metre.
#define PTM_RATIO 32 //you should only keep this here

@protocol LevelHelperLoaderCustomCCSprite
@optional

-(CCSprite*) spriteFromDictionary:(NSDictionary*)spriteProp;

-(CCSprite*) spriteWithBatchFromDictionary:(NSDictionary*)spriteProp 
								   batchNode:(CCSpriteBatchNode*)batch;

-(void) removeFromBatchNode:(CCSprite*)sprite;


//this two methods should be overloaded together
//first one is for physic sprites 
-(void) setCustomAttributesForPhysics:(NSDictionary*)spriteProp 
                       body:(b2Body*)body
                     sprite:(CCSprite*)sprite;
//this second one is for the case where you dont use physics or you have sprites
//with "NO PHYSIC" as physic type
-(void) setCustomAttributesForNonPhysics:(NSDictionary*)spriteProp 
                               sprite:(CCSprite*)sprite;


@end

@interface LevelHelperLoader : NSObject<LevelHelperLoaderCustomCCSprite> {
	
	NSArray* lhSprites;	//array of NSDictionary with keys GeneralProperties (NSDictionary) 
						//and PhysicProperties (NSDictionary)
	NSArray* lhJoints;	//array of NSDictionary
    NSArray* lhParallax;//array of NSDictionary 
    NSArray* lhBeziers; //array of NSDictionary
    NSArray* lhAnims;   //array of NSDictionary

	NSMutableDictionary* ccSpritesInScene;	//key - uniqueSpriteName	value - CCSprite* or NSValue with b2Body*
	NSMutableDictionary* noPhysicSprites;   //key - uniqueSpriteName    value - CCSprite*
	NSMutableDictionary* ccJointsInScene;   //key - uniqueJointName     value - NSValue withPointer of b2Joint*
    NSMutableDictionary* ccParallaxInScene; //key - uniqueParallaxName  value - CCParallaxNode*
    NSMutableDictionary* ccBeziersBodyInScene;  //key - uniqueBezierName    value - NSValue withPointer of b2Body*
    NSMutableDictionary* ccBezierPathsInScene; //key - uniqueBezierName value - NSArray with NSValue with Point;
	NSMutableDictionary* batchNodes;		//key - textureName			value - NSDictionary
    NSMutableDictionary* ccFramesForAnimation;//key uniqueAnimName      value - NSMutableArray of CCSpriteFrame
	NSDictionary* wb; //world boundaries Info
	bool addSpritesToLayerWasUsed;
	bool addObjectsToWordWasUsed;
    
    CGPoint gravity;
	
    id pathNotifierId;
    SEL pathNotifierSel;
    
    id animNotifierId;
    SEL animNotifierSel;
    bool notifOnLoopForeverAnim;
    
	CCLayer* cocosLayer; //hold pointer to properly release the sprites
    
    bool convertLevel;
    CGPoint convertRatio;
}

////////////////////////////////////////////////////////////////////////////////

-(id) initWithContentOfFile:(NSString*)levelFile;

-(id) initWithContentOfFileFromInternet:(NSString*)webAddress;

-(id) initWithContentOfFile:(NSString*)levelFile 
			 levelSubfolder:(NSString*)levelFolder;


+(int) tagForBody:(b2Body*)body;
+(CCSprite*) spriteForBody:(b2Body*)body;
+(int) tagForJoint:(b2Joint*)joint;

//you will have to call this before initWithContentOfFile 
//[LevelHelperLoader useRetinaOnIpad:false];
+(void) useRetinaOnIpad:(bool)value;

//this will convert level to the used devide - safe frame must be the size of the
//device resolution inside LevelHelper - by default convertLevel is TRUE
//only call this method do deactivate the convert level option
-(void) convertLevel:(bool)value;

////////////////////////////////////////////////////////////////////////////////

/*
 DISCUSSION:
 Please call this method just before box2d update (the for loop from the tick function)
 NEEDED FOR
 - parallax scrolling
 - follow path to work correctly on sprites with static/kynematic body
 */
-(void) update:(ccTime) dt;

/*
//DISCUSSION
this will create all the b2Body with the attached sprites.
PLEASE READ THIS - in order to prepare this class for v1.4 I have added in the userData of CCSprite the following NSMutableDictionary
this is also necessary in order to make follow path work with static physic sprites or else the position will be reset by the physic update

 so 
 b2Body     userData -> CCSprite
 CCSprite   userData -> NSMutableDictionary ->  key "UniqueName" returns NSString
                                                key "AnimName" returns NSString
                                                key "CurrentFrame" returns NSNumber numberWithInt in order to know at what frame in the animation you are (only updates on nextFrameForSpriteWithUniqueName and prevFrameForSpriteWithUniqueName)
                                                key "Body" returns NSValue -> use: b2Body* body = (b2Body)[value pointerValue];

*/
-(void) addObjectsToWorld:(b2World*)world cocos2dLayer:(CCLayer*)cocosLayer;

//DISCUSSION
/*
It is very IMPORTANT that an animation started on a sprite to have the same texture as the sprite (use the same image file)
 */
-(void) startAnimationWithUniqueName:(NSString *)animName onSprite:(CCSprite*)ccsprite;
-(void) startAnimationWithUniqueName:(NSString*)animName onSpriteWithUniqueName:(NSString*)sprName;

-(void) stopAnimationWithUniqueName:(NSString*)animName onSprite:(CCSprite*)ccsprite;
-(void) stopAnimationWithUniqueName:(NSString*)animName onSpriteWithUniqueName:(NSString*)sprName;

//DISCUSSION
/*
 Sometime you may not want to run the animation - but run it frame by frame
 For example when you have a block in multiple states (not braked, half braked, full braked) and you want to change the state when the block is hit
 This two methods work only if the sprite with the assigned animation is in scene.
 */
-(void) nextFrameForSprite:(CCSprite*)ccsprite;
-(void) nextFrameForSpriteWithUniqueName:(NSString*)sprName;

-(void) prevFrameForSprite:(CCSprite*)spr;
-(void) prevFrameForSpriteWithUniqueName:(NSString*)sprName;

//DISCUSSION
//signature for registered method should be like this: -(void)spriteMoveOnPathEnded:(CCSprite*)spr
//registration is done like this: [loader registerNotifierOnPathEndPoints:self selector:@selector(spriteMoveOnPathEnded:)];
-(void) registerNotifierOnPathEndPoints:(id)obj selector:(SEL)sel;

//DISCUSSION
//signature for registered method should be like this: -(void) spriteAnimHasEnded:(CCSprite*)spr animationName:(NSString*)animName
//registration is done like this: [loader registerNotifierOnAnimationEnds:self selector:@selector(spriteAnimHasEnded:animationName:)];
-(void) registerNotifierOnAnimationEnds:(id)obj selector:(SEL)sel;

//DISCUSSION
/*
 by default the notification on animation end works only on non-"loop forever" animations
 if you want to receive notifications on "loop forever" animations enable this behaviour
 before addObjectsToWorld by calling the following function
 */
-(void) enableNotifOnLoopForeverAnimations;
////////////////////////////////////////////////////////////////////////////////
 
-(void) addSpritesToLayer:(CCLayer*)cocosLayer;

////////////////////////////////////////////////////////////////////////////////

-(bool) isGravityZero;
-(void) createGravity:(b2World*)world;

-(bool) hasWorldBoundaries;

////////////////////////////////////////////////////////////////////////////////

-(void) createWorldBoundaries:(b2World*)world;

////////////////////////////////////////////////////////////////////////////////

-(unsigned int) numberOfBatchNodesUsed;

////////////////////////////////////////////////////////////////////////////////

-(bool) isSpriteWithUniqueName:(NSString*)name atPoint:(CGPoint)point;

////////////////////////////////////////////////////////////////////////////////
 
-(CCSprite*) spriteWithUniqueName:(NSString*)name; 

////////////////////////////////////////////////////////////////////////////////

-(b2Body*) bodyWithUniqueName:(NSString*)name;

////////////////////////////////////////////////////////////////////////////////

//this will create a new sprite in a batch node
-(CCSprite*) newSpriteWithUniqueName:(NSString *)uniqueName;

//this will create a new sprite in the layer - no batch node
-(CCSprite*) newSpriteWithUniqueName:(NSString*)name 
						  cocos2dLayer:(CCLayer*)cocosLayer; 

////////////////////////////////////////////////////////////////////////////////

-(b2Body*) newBodyWithUniqueName:(NSString*)name 
						   world:(b2World*)world 
					cocos2dLayer:(CCLayer*)cocosLayer;

////////////////////////////////////////////////////////////////////////////////

-(NSMutableArray*) spritesWithTag:(LevelHelper_TAG)tag;

////////////////////////////////////////////////////////////////////////////////

-(NSMutableArray*) bodiesWithTag:(LevelHelper_TAG)tag;

////////////////////////////////////////////////////////////////////////////////

-(NSMutableArray*) newSpritesWithTag:(LevelHelper_TAG)tag
						  cocos2dLayer:(CCLayer*)cocosLayer;

////////////////////////////////////////////////////////////////////////////////

-(NSMutableArray*) newBodiesWithTag:(LevelHelper_TAG)tag 
							  world:(b2World*)world 
					   cocos2dLayer:(CCLayer*)cocosLayer;

-(CCParallaxNode*) paralaxNodeWithUniqueName:(NSString*)uniqueName;
-(NSArray*) spritesInParallaxNodeWithUniqueName:(NSString*)uniqueName;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeSpriteWithUniqueName:(NSString*)name;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeSprite:(CCSprite*)ccsprite;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeAllSprites;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeBodyWithUniqueName:(NSString*)name;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeBody:(b2Body*)body;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeBodiesWithTag:(LevelHelper_TAG)tag;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeAllBodies;

////////////////////////////////////////////////////////////////////////////////

-(b2Joint*) jointWithUniqueName:(NSString*)name;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeJointWithUniqueName:(NSString*)name;


/*
returns NSMutableArray containing NSValue valueWithPoints:b2Joint
//Example of use
for(NSValue* val in arrayReturned)
{
 b2Joint* joint = (b2Joint*)[val pointerValue];
}
*/
-(NSMutableArray*) jointsWithTag:(LevelHelper_TAG)tag;

//use this method to remove multiple joints at once
-(void) removeAllJointsWithTag:(LevelHelper_TAG)tag;
////////////////////////////////////////////////////////////////////////////////

-(bool) removeJoint:(b2Joint*) joint;

////////////////////////////////////////////////////////////////////////////////

-(bool) removeAllJoints;

////////////////////////////////////////////////////////////////////////////////

-(CCSpriteBatchNode*) batchNodeForFile:(NSString*) imageName;

-(NSArray*) batchNodesInLevel;

////////////////////////////////////////////////////////////////////////////////

-(void) setSpriteProperties:(CCSprite*)ccsprite spriteProperties:(NSDictionary*)spriteProp;

////////////////////////////////////////////////////////////////////////////////

@end


















